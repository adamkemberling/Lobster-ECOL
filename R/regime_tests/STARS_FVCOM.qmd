---
title: "RSTARS FVCOM"
description: | 
  Detailing common methods and preprocessing steps for regime shift detection methods
date: "Updated on: `r Sys.Date()`"
format: 
  html:
    code-fold: true
    code-tools: true
    df-print: kable
    self-contained: true
execute: 
  echo: true
  warning: false
  message: false
  fig.align: "center"
  comment: ""
---

```{r}
# Packages
{
  library(here)
  library(tidyverse)
  library(rshift)
  library(gmRi)
  library(mgcv)
  library(EnvCpt)
  library(showtext)
  library(patchwork)
  library(degday)
}

# Make sure lag is done correctly
conflicted::conflict_prefer("lag", "stats")
conflicted::conflict_prefer("filter", "dplyr")

# Path to timeseries
lob_ecol_path <- cs_path("mills", "Projects/Lobster ECOL")


# Plot theme
theme_set(theme_gmri())


# Factor Levels
areas_northsouth <- c(
  "Eastern Maine",  
  "Western Maine",  
  "Central Maine",  
  "Eastern Mass",
  "W South Channel",
  "Nantucket Shoals",  
  "Off No Mans Land",  
  "Southern Mass",  
  "Rhode Island Shore",
  "Long Island Sound", 
  "Cholera Bank",
  "Off Long Island",   
  "New Jersey Shore",  
  "Barnegat Ridge",  
  "Five Fathom Bank",  
  "Virginia Shore",
  "GOM_GBK",         
  "SNE")

area_subset <- c(
  "Eastern Maine",
  "Central Maine",
  "Western Maine",
  "Eastern Mass",
  "Southern Mass",
  "W South Channel",
  "Nantucket Shoals",
  "Off No Mans Land",
  "GOM_GBK",
  "SNE"

)
```


```{r}
#| label: style-sheet
#| results: asis

# Use GMRI style for fonts
use_gmri_style_rmd()

```


```{r}
#| label: fonts-config
#| echo: false

# Path to the directory containing the font file (replace with your actual path)
font_dir <- paste0(system.file("stylesheets", package = "gmRi"), "/GMRI_fonts/Avenir/")

# Register the font
font_add(
  family = "Avenir",
  file.path(font_dir, "LTe50342.ttf"),
  bold = file.path(font_dir, "LTe50340.ttf"),
  italic = file.path(font_dir, "LTe50343.ttf"),
  bolditalic = file.path(font_dir, "LTe50347.ttf"))

# Load the font
showtext::showtext_auto()

```


```{r}
#| label: load timeseries


# Load and add inshore/offshore labels on the daily data:

# daily temperatures
daily_fvcom_temps <- read_csv(
  str_c(lob_ecol_path, "FVCOM_processed/area_timeseries/all_regions_fvcom_temperatures_daily.csv")) %>% 
  mutate(depth_type = if_else(area_id %in% c("GOM_GBK", "SNE"), "offshore", "nearshore"))

# monthly salinities
monthly_fvcom_sal <- read_csv(
  str_c(lob_ecol_path, "FVCOM_processed/area_timeseries/all_regions_fvcom_salinity_monthly_gom3.csv"))



```



# STARS Regime Shifts - LobECOL Areas

# {rstars} Implementation

The following results extend the detailed approach of Stirnimann et al. 2019's [{rstars}](https://github.com/LStirnimann/rstars) repository.


```{r}
# Stirnimann used these values in their paper:
# l = 5,10,15,17.5 years, with monthly data
# Huber = 1
# Subsampling = (l + 1)/3


# Load the function(s)
source(here::here("rstars-master","rSTARS.R"))

```

# Data Pre-Processing

For our results we've expanded on their approach with two additional pre-procesing steps recommended by Rodionov (pretty sure) & in the recent review by Lund et al. 2023's.

These two additional steps include removing the seasonal cycle using a GAM and a cyclic cubic regression spline to model the seasonal cycle. 

The other additional pre-processing step is the removal of the long-term trend. To illustrate these pre-processing steps, a daily bottome temperature timeseries for `Southern Massachusetts` will be used below:

```{r}
# Test timeseries
#test_area <- "Southern Mass"
test_area <- "GOM_GBK"
tester <- filter(daily_fvcom_temps, area_id == test_area) 
# Make a day of year value to cycle over
tester <- tester %>% 
  mutate(yday = lubridate::yday(time),
         year = year(time),
         month = factor(month.abb[month(time)], levels = month.abb))
test_sal <- filter(monthly_fvcom_sal, area_id == test_area) %>% 
  mutate(month = factor(month.abb[month(time)], levels = month.abb))

# Plot Surface and Bottom

ggplot(tester, aes(time)) +
  geom_line(aes(y = surface_t, color = "Surface Temperature"), alpha = 0.8) +
  geom_line(aes(y = bottom_t, color = "Bottom Temperature"), alpha = 0.8) + 
  scale_color_gmri() +
  labs(y = "Temperature", title = str_c(test_area, " FVCOM Temperatures"))
```

As expected, ocean temperatures in Southern Mass. follow a pronounced seasonal cycle.

```{r}
ggplot(test_sal, aes(time)) +
  geom_line(aes(y = surface_salinity, color = "Surface Salinity"), alpha = 0.8) +
  geom_line(aes(y = bottom_salinity, color = "Bottom Salinity"), alpha = 0.8) + 
  scale_color_gmri() +
  labs(y = "Salinity", title = str_c(test_area, " FVCOM Salinity"))

```


For other variables like salinity, the seasonality can be less obvious.



### Removing Seasonalilty

 We can model this periodicity to get a sense of the average temperature based on the day of the year.


```{r}

# Model a linear trend and the seasonal cycle
season_only_gam <- gam(
  bottom_t ~ s(yday, bs = "cc"), 
  data = tester,
  method = "REML")

# Add the predictions and residuals
season_test <- broom::augment(x = season_only_gam) %>% 
  rename(seasonal_fit = .fitted,
         seasonal_resid = .resid) %>% 
  distinct(yday, seasonal_fit)
```

Seasonal temperatures are at their lowest during February-March, and they peak during July-August. Each individual year will vary, but the seasonal period is quite consistent.

```{r}
# Plot what that looke like on an annual time scale
p1 <- ggplot(tester, aes(x = yday)) +
  geom_line(
    aes(y = bottom_t, color = "Single Year Series", group = year(time)), 
    linewidth = 0.5, alpha = 0.75) +
  geom_line(
    data = season_test,
    aes(y = seasonal_fit, color = "Mean Seasonal Cycle"), 
    alpha = 0.75, linewidth = 2) +
  scale_color_grey() +
  theme(legend.position = "bottom") +
  labs(color = "Data",
       y = "Bottom Temperature",
       x = "Day of Year",
       title = str_c(test_area, " Daily SST Seasonality"))

p2 <- tester  %>% 
  ggplot(aes(month, bottom_t)) +
  geom_point(
    position = position_jitter(height = 0, width = 0.1), 
    alpha = 0.35, color = "gray") +
  geom_point(
    data = tester %>% group_by(month) %>% summarise(bottom_t = mean(bottom_t)),
    shape = "-", size = 20, color = "gray30") +
  labs(color = "Data",
       y = "Bottom Temperature",
       x = "Day of Year",
       title = str_c(test_area, " Monthly SST Seasonality"))

p1/p2
```

Removal of seasonal (monthly) means results in timeseries that look like this:

```{r}
# Remove the Daily Seasonality
tester %>%
  left_join(season_test, by = join_by("yday")) %>% 
  mutate(seasonal_resid = bottom_t - seasonal_fit)  %>% 
  ggplot(aes(time, seasonal_resid)) +
  geom_line( alpha = 0.75) +
  geom_hline(yintercept = 0, aes(color = "Seasonal Mean Temeprature"), linewidth = 2, alpha = 0.75) +
  labs(y = "Seasonal Temperature Anomaly",
       title = "Removal of Seasonal Period")

# Monthly version
 tester %>% 
  mutate(month = factor(month.abb[month(time)], levels = month.abb)) %>% 
  group_by(month) %>% 
  summarise(bot_temp_mean = mean(bottom_t, na.rm = T)) %>% 
  left_join(
    mutate(tester, month = factor(month.abb[month(time)], levels = month.abb)) %>% 
      group_by(year = year(time), month) %>% 
    summarise(bottom_t = mean(bottom_t, na.rm = T))) %>% 
  mutate(seasonal_resid = bottom_t - bot_temp_mean,
         time = as.Date(str_c(
           year,
           str_pad(as.numeric(month), side = "left", width = 2, pad = "0"),
           "15", sep = "-"))) %>% 
  ggplot(aes(time, seasonal_resid)) +
  geom_line(alpha = 0.75) +
  geom_hline(yintercept = 0, aes(color = "Seasonal Mean Temeprature"), linewidth = 2, alpha = 0.75) +
  labs(
    y = "Seasonal Temperature Anomaly",
    title = "Removal of Long-Term Monthly Mean SST")




# Remove mean monthly salinity too
test_sal %>% 
  group_by(month) %>% 
  summarise(surf_sal_mean = mean(surface_salinity),
            bot_sal_mean = mean(bottom_salinity),
            .groups = "drop") %>% 
  right_join(test_sal, join_by(month)) %>% 
  mutate(
    surface_resid = surface_salinity - surf_sal_mean,
    bottom_resid = bottom_salinity - bot_sal_mean) %>% 
  ggplot() +
  geom_line(aes(time, surface_resid, color = "Surface"), alpha = 0.75) +
  geom_line(aes(time, bottom_resid, color = "Bottom"), alpha = 0.75) +
  geom_hline(yintercept = 0, linewidth = 2, alpha = 0.75) +
  scale_color_gmri() +
  labs(
    y = "Seasonal Salinity Anomaly",
    title = "Removal of Long-Term Monthly Mean Salinity")
```



### Removing Long-Term Trends

The RSTARS approach is a sequential evaluation of whether new data falls within a probable range of values based on the mean/variance of data from some starting "regime". For cases when there exists is a long-term trend, this approach can sometimes treat a gradual transition as regime shift, which we also don't want.

De-trending can be done quickly with `lm`

```{r}

# linear model with time
tester_trend_mod <- lm(bottom_t ~ time, tester)

# residuals are the detrended timeseries
# we can re-add global mean if we want it in original units
trend_tester <- broom::augment(x = tester_trend_mod) %>% 
  rename(trend_fit = .fitted,
         trend_resid = .resid)

# Plot detrended timeseries
trend_tester %>%
  ggplot() +
  geom_line(aes(time, bottom_t, color = "Bottom Temperature"), alpha = 0.5) +
  geom_smooth(
    aes(time, bottom_t, color = "Bottom Temperature"),
    method = "lm", se = F) +
  geom_line(
    aes(time, trend_resid + coef(tester_trend_mod)[[1]], color = "Trend-Removed"), alpha = 0.5) +
  geom_smooth(
    method = "lm", se = F,
    aes(time, trend_resid + coef(tester_trend_mod)[[1]], color = "Trend-Removed")) +
  labs(title = "Detrended Daily Timeseries", color = "Data")


```


## Removing Both Trends and Seasonality 

We can easily implement the linear long-term trend and the seasonal periodicity using the GAM framework. Residuals from this model are what we will pass along to the RSTARS package with the recommended prewhitening routines applied.

```{r}
# Model a linear trend and the seasonal cycle
season_trend_gam <- gam(
  bottom_t ~ s(yday, bs = "cc") + time, 
  data = tester,
  method = "REML")

# save the results
season_trend_results <- broom::augment(x = season_trend_gam) %>% 
  rename(seasonal_fit = .fitted,
         seasonal_resid = .resid) 
```

This is what that seasonal cycle looks like with the long-term trend compared to 

```{r}
# Plot the fit of that process
season_trend_results %>% 
  ggplot(aes(x = time)) +
  geom_line(aes(y = bottom_t, color = "Original Timeseries"), alpha = 0.75, linewidth = 1) +
  geom_line(aes(y = seasonal_fit, color = "Seasonal Cycle + Trend"), alpha = 0.75, linewidth = 0.5) +
  labs(color = "Data")
```

And this is the timeseries that would go into rstars for regime shift detection:

```{r}
season_trend_results %>% 
  ggplot(aes(x = time)) +
  geom_line(aes(y = seasonal_resid), alpha = 0.7) +
  labs(color = "Data", y = "Temperature Anomaly", title =  str_c(test_area, " - RSTARS Ready"))
```



# Running STARS with Full Routine

The last step is to run it through the RSTARS algorithm and specify a few more arguments for how to treat the timeseries.

We need to set arguments for regime length, outlier weighting, and for our regime probability cutoff. There are also options for prewhitening methods which help address autocorrelation in the timeseries.



```{r}
# Run it with

# Stirnimann used these values in their paper:
# l = 5,10,15,17.5 years, with monthly data
# Huber = 1
# Subsampling = (l + 1)/3

# He also recommended using prewhitening, and recommended MPK and IP4

# Or do the prewhitening on the detrended data?
lis_rstars <- rstars(
  data.timeseries = as.data.frame(season_trend_results[,c("time", "seasonal_resid")]), 
  l.cutoff = 365*7, 
  pValue = 0.05, 
  Huber = 1, 
  Endfunction = T,    # Some behavior at the end of the timeseries
  preWhitening = T,   # Apply prewhitening T/F
  OLS = F,            # OLSprewhitening method T/F
  MPK = T,            # Marriott-Pope + Kennedy prewhitening method T/F
  IP4 = F,            # IP4 prewhitening method T/F
  SubsampleSize = (365*7 + 1) / 3, # subsampling rate for hubers + prewhitening
  returnResults = T) # Return the results as a dataframe

  


# Results now look like this:
ggplot(lis_rstars) +
  geom_line(
    aes(time, seasonal_resid), 
    linewidth = 0.5, alpha = 0.5) +
  geom_line(aes(time, regime_mu), linewidth = 1) +
  geom_vline(
    data = filter(lis_rstars, RSI != 0),
    aes(xintercept = time), color = "red", linewidth = 1) +
  scale_y_continuous(limits = c(-0.35, 0.35)) +
  labs(x = "", 
       y = "Detrended Bottom Temp Anomaly",
       title = "STARS Results - After full pre-processing steps",
       subtitle = test_area)
```



### Daily Bottom Temperature RSI

If we apply the above steps to each daily bottom temperature timeseries we can return the following results:

```{r}
#| eval: false
#| label: bottom temperature processing

# # Run them all
# bot_temp_shifts <- daily_fvcom_temps %>%
#   mutate(yday = lubridate::yday(time)) %>% 
#   split(.$area_id) %>%
#   map_dfr(function(.x){
#     
#     # Fit the model to detrend and remove seasons
#     # Model a linear trend and the seasonal cycle
#     season_trend_model <- gam(
#       bottom_t ~ s(yday, bs = "cc") + time, 
#       data = .x,
#       method = "REML")
#     
#     # save the results
#     preprocessed_results <- broom::augment(x = season_trend_model) %>% 
#       rename(
#         model_fit = .fitted,
#         model_resid = .resid) 
#     
#     
#     # Get the results from that
#     x_rstars <- rstars(
#       data.timeseries = as.data.frame(preprocessed_results[,c("time", "model_resid")]), 
#       l.cutoff = 365*7,
#       pValue = 0.05,
#       Huber = 1,
#       Endfunction = T,
#       preWhitening = T,
#       OLS = F,
#       MPK = T,
#       IP4 = F,
#       SubsampleSize = (365*7 + 1)/3,
#       returnResults = T)
#     
#     return(x_rstars)
# 
#     }, .id = "area_id")
# 
# 
# # Save it
# write_csv(bot_temp_shifts, here::here("rstars_results/lobecol_btemp_shifts_detrended.csv"))
```


```{r}
#| eval: true

# Load that data again
bot_temp_shifts <- read_csv(here::here("rstars_results/lobecol_btemp_shifts_detrended.csv"))


# Plot the RSI
bot_temp_shifts %>% 
 ggplot() +
  geom_line(aes(time, RSI), linewidth = 0.5, alpha = 0.35) +
  geom_hline(yintercept = 0) +
  facet_grid() +
  labs(
    x = "Time",
    y = "RSI",
    title = "All Areas, Bottom Temperature RSI")

```


```{r}
# ggplot(bot_temp_shifts) +
#   geom_line(aes(time, regime_mu_pw), 
#             linewidth = 0.5, alpha = 0.5) +
#   geom_line(aes(time, regime_mu), linewidth = 1) +
#   geom_vline(
#     data = filter(bot_temp_shifts, RSI != 0),
#     aes(xintercept = time), color = "red", linewidth = 1) +
#   scale_y_continuous(limits = c(-0.35, 0.35)) +
#   labs(x = "", 
#        y = "Detrended Bottom Temp Anomaly",
#        title = "Daily BT STARS Results",
#        caption = "Full prewhitening+detrending routine",
#        subtitle = test_area)
```

### Daily Surface Temperature RSI

Repeating the process for daily sea surface temperatures gives us these RSI results:

```{r}
#| eval: false
#| label: surface temperature processing

# # Run them all
# surf_temp_shifts <- daily_fvcom_temps %>%
#   mutate(yday = lubridate::yday(time)) %>% 
#   split(.$area_id) %>%
#   map_dfr(function(.x){
#     
#     # Fit the model to detrend and remove seasons
#     # Model a linear trend and the seasonal cycle
#     season_trend_model <- gam(
#       surface_t ~ s(yday, bs = "cc") + time, 
#       data = .x,
#       method = "REML")
#     
#     # save the results
#     preprocessed_results <- broom::augment(x = season_trend_model) %>% 
#       rename(
#         model_fit = .fitted,
#         model_resid = .resid) 
#     
#     
#     # Get the results from that
#     x_rstars <- rstars(
#       data.timeseries = as.data.frame(preprocessed_results[,c("time", "model_resid")]), 
#       l.cutoff = 365*7,
#       pValue = 0.05,
#       Huber = 1,
#       Endfunction = T,
#       preWhitening = T,
#       OLS = F,
#       MPK = T,
#       IP4 = F,
#       SubsampleSize = (365*7 + 1)/3,
#       returnResults = T)
#     
#     return(x_rstars)
# 
#     }, .id = "area_id")
# 
# 
# # Save it
# write_csv(surf_temp_shifts, here::here("rstars_results/lobecol_stemp_shifts_detrended.csv"))
```



```{r}
#| eval: true

# Load that data again
surf_temp_shifts <- read_csv(here::here("rstars_results/lobecol_stemp_shifts_detrended.csv"))


# Plot the RSI
surf_temp_shifts %>% 
 ggplot() +
  geom_line(aes(time, RSI), linewidth = 0.5, alpha = 0.35) +
  geom_hline(yintercept = 0) +
  facet_grid() +
  labs(
    x = "Time",
    y = "RSI",
    title = "All Areas, Surface Temperature RSI")

```



```{r}
# ggplot(surf_temp_shifts) +
#   geom_line(aes(time, regime_mu_pw), 
#             linewidth = 0.5, alpha = 0.5) +
#   geom_line(aes(time, regime_mu), linewidth = 1) +
#   geom_vline(
#     data = filter(surf_temp_shifts, RSI != 0),
#     aes(xintercept = time), color = "red", linewidth = 1) +
#   scale_y_continuous(limits = c(-0.35, 0.35)) +
#   labs(x = "", 
#        y = "Detrended Bottom Temp Anomaly",
#        title = "Daily SST STARS Results",
#        caption = "Full prewhitening+detrending routine",
#        subtitle = test_area)
```





# Processing Monthly Means

Other than temperature we have very few daily environmental timeseries. We also are less interested in the time within a year that changes ocurred, and more interested in the general year/month that changes are ocurring in. 

For these reasons and for consistency with the other environmental drivers, I will repeat these steps using monthly mean SSt & BT.



## Monthly Temperature RSI



```{r}
#| label: process monthly mean SST + BT

# Take the input data,
# Get monthly averages
# remove trend and long-term monthly means
# run STARS routine again


# Run the monthly versions

# # Run them all
# surf_temp_monthly_shifts <- daily_fvcom_temps %>%
#   mutate(
#     year = lubridate::year(time),
#     month = lubridate::month(time)) %>%
#   split(.$area_id) %>%
#   map_dfr(function(.x){
#     
#     # Make it monthly
#     .x_monthly <- .x %>% 
#       group_by(year, month) %>% 
#       summarise(
#         surface_t = mean(surface_t, na.rm = T),
#         bottom_t  = mean(bottom_t, na.rm = T),
#         .groups = "drop") %>% 
#       mutate(month = factor(month),
#              yr_num = as.numeric(as.character(year)))
#     
# 
#     # Fit the model to detrend and remove seasons
#     # Model a linear trend and the seasonal cycle
#     season_trend_model <- gam(
#       surface_t ~ month + yr_num,
#       data = .x_monthly,
#       method = "REML")
# 
#     # save the results
#     preprocessed_results <- broom::augment(x = season_trend_model) %>%
#       rename(
#         model_fit = .fitted,
#         model_resid = .resid) %>% 
#       # Rebuild a "date" column to pass to the function
#       mutate(time = as.Date(
#         str_c(
#           yr_num, 
#           str_pad(month, side = "left", pad = "0", width = 2),
#           "15", sep = "-")))
#     #return(preprocessed_results) #check 
# 
# 
#     # Get the results from that
#     x_rstars <- rstars(
#       data.timeseries = as.data.frame(
#         preprocessed_results[,c("time", "model_resid")]),
#       l.cutoff = 12*7,
#       pValue = 0.05,
#       Huber = 1,
#       Endfunction = T,
#       preWhitening = T,
#       OLS = F,
#       MPK = T,
#       IP4 = F,
#       SubsampleSize = (12*7 + 1)/3,
#       returnResults = T)
# 
#     return(x_rstars)
# 
#     }, .id = "area_id")
# 
# 
# 
# #Bottom temperature
# bot_temp_monthly_shifts <- daily_fvcom_temps %>%
#   mutate(
#     year = lubridate::year(time),
#     month = lubridate::month(time)) %>%
#   split(.$area_id) %>%
#   map_dfr(function(.x){
#     
#     # Make it monthly
#     .x_monthly <- .x %>% 
#       group_by(year, month) %>% 
#       summarise(
#         surface_t = mean(surface_t, na.rm = T),
#         bottom_t  = mean(bottom_t, na.rm = T),
#         .groups = "drop") %>% 
#       mutate(month = factor(month),
#              yr_num = as.numeric(as.character(year)))
#     
# 
#     # Fit the model to detrend and remove seasons
#     # Model a linear trend and the seasonal cycle
#     season_trend_model <- gam(
#       bottom_t ~ month + yr_num,
#       data = .x_monthly,
#       method = "REML")
# 
#     # save the results
#     preprocessed_results <- broom::augment(x = season_trend_model) %>%
#       rename(
#         model_fit = .fitted,
#         model_resid = .resid) %>% 
#       # Rebuild a "date" column to pass to the function
#       mutate(time = as.Date(
#         str_c(
#           yr_num, 
#           str_pad(month, side = "left", pad = "0", width = 2),
#           "15", sep = "-")))
#     #return(preprocessed_results) #check 
# 
# 
#     # Get the results from that
#     x_rstars <- rstars(
#       data.timeseries = as.data.frame(
#         preprocessed_results[,c("time", "model_resid")]),
#       l.cutoff = 12*7,
#       pValue = 0.05,
#       Huber = 1,
#       Endfunction = T,
#       preWhitening = T,
#       OLS = F,
#       MPK = T,
#       IP4 = F,
#       SubsampleSize = (12*7 + 1)/3,
#       returnResults = T)
# 
#     return(x_rstars)
# 
#     }, .id = "area_id")
# 
# 
# 
# 
# 
# # Save them
# write_csv(surf_temp_monthly_shifts, here::here("rstars_results/lobecol_stemp_monthly_shifts_detrended.csv"))
# write_csv(bot_temp_monthly_shifts, here::here("rstars_results/lobecol_btemp_monthly_shifts_detrended.csv"))

```



```{r}
#| eval: true
#| label: plot surface temp monthly RSI

# Load that data again
surf_temp_monthly_shifts <- read_csv(here::here("rstars_results/lobecol_stemp_monthly_shifts_detrended.csv"))


# Plot the RSI for both
surf_temp_monthly_shifts %>% 
 ggplot() +
  geom_line(aes(time, RSI), linewidth = 0.5, alpha = 0.35) +
  geom_hline(yintercept = 0) +
  facet_grid() +
  labs(
    x = "Time",
    y = "RSI",
    title = "Monthly Surface Temperature RSI")
```



```{r}
#| eval: true
#| label: plot bottom temp monthly RSI

bot_temp_monthly_shifts <- read_csv(here::here("rstars_results/lobecol_btemp_monthly_shifts_detrended.csv"))

# Plot one area's results
bot_temp_monthly_shifts %>% 
  filter(area_id == test_area) %>% 
  ggplot() +
  geom_line(aes(time, model_resid_pw), color = "gray35") +
  geom_line(aes(time, regime_mu_pw), color = "red", linewidth = 1) +
  labs(y = "Detrended Temperature", x = "Date",
       title = str_c("STARS Monthly Demo:\n", test_area),
       subtitle = "Preprocessed BT, with STARS Regime Means")
  


# Plot the RSI for both
bot_temp_monthly_shifts %>% 
 ggplot() +
  geom_line(aes(time, RSI), linewidth = 0.5, alpha = 0.35) +
  geom_hline(yintercept = 0) +
  facet_grid() +
  labs(
    x = "Time",
    y = "RSI",
    title = "Monthly Bottom Temperature RSI")
```


```{r}
#| label: plotting the shifts in line by area
p1 <- surf_temp_monthly_shifts %>% 
  mutate(RSI = if_else(RSI == 0, NA, RSI),
         RSI_col = if_else(RSI>0, "orange", "royalblue")) %>% 
  ggplot(aes(x = time, y = area_id)) +
  geom_point(aes(size = abs(RSI), color = I(RSI_col))) +
  labs(title = "Monthly Surface Temperature RSI")


p2 <- bot_temp_monthly_shifts %>% 
  mutate(RSI = if_else(RSI == 0, NA, RSI),
         RSI_col = if_else(RSI>0, "orange", "royalblue")) %>% 
  ggplot(aes(x = time, y = area_id)) +
  geom_point(aes(size = abs(RSI), color = I(RSI_col)))  +
  labs(title = "Monthly Bottom Temperature RSI")



p1/p2

```

### Recap

```{r}
# Start cold regimes
surf_temp_monthly_shifts %>% filter(RSI<0)
bot_temp_monthly_shifts %>% filter(RSI<0)


# Start positive regimes
surf_temp_monthly_shifts %>% filter(RSI>0)
bot_temp_monthly_shifts %>% filter(RSI>0)
```

```{r}


# Summarise them and put them together
dst <- surf_temp_shifts %>% filter(RSI != 0) %>% 
  mutate(
    shift_direction = if_else(RSI>0, "Shift to Warm", "Shift to Cool"),   
    var = "daily surface temperature") %>% 
  dplyr::select(area_id, time, RSI, shift_direction, var)
dbt <- surf_temp_shifts %>% filter(RSI != 0) %>% 
  mutate(
    shift_direction = if_else(RSI>0, "Shift to Warm", "Shift to Cool"),   
    var = "daily bottom temperature") %>% 
  dplyr::select(area_id, time, RSI, shift_direction, var)
mst <- surf_temp_monthly_shifts %>% filter(RSI != 0) %>% 
  mutate(
    shift_direction = if_else(RSI>0, "Shift to Warm", "Shift to Cool"),   
    var = "monthly surface temperature") %>% 
  dplyr::select(area_id, time, RSI, shift_direction, var)
mbt <- bot_temp_monthly_shifts %>% filter(RSI != 0) %>% 
  mutate(
    shift_direction = if_else(RSI>0, "Shift to Warm", "Shift to Cool"),   
    var = "monthly bottom temperature") %>% 
  dplyr::select(area_id, time, RSI, shift_direction, var)


# Combine results for plotting
stars_results_summ <- bind_rows(list(dst, dbt, mst, mbt)) %>% 
  mutate(area_id = factor(area_id, levels = areas_northsouth),
         year = year(time))


# # Cold Regimes, Monthly
# stars_results_summ %>% filter(RSI<0, str_detect(var, "monthly")) %>% count(year(time))
# # Warm Regimes, Monthly
# stars_results_summ %>% filter(RSI>0, str_detect(var, "monthly")) %>% count(year(time))
```

```{r}

# Get Monthly temperatures
temps_monthly <- daily_fvcom_temps %>%
  mutate(
    year = lubridate::year(time),
    month = lubridate::month(time)) %>% 
  group_by(area_id, year, month) %>% 
  summarise(
    surface_t = mean(surface_t, na.rm = T),
    bottom_t = mean(bottom_t, na.rm = T),
    .groups = "drop") %>% 
  mutate(
    area_id = factor(area_id, levels = areas_northsouth),
    time = as.Date(
      str_c(
        year,
        str_pad(month, side = "left", pad = "0", width = 2),
        "15", sep = "-"))) %>% 
  rename(
    `monthly surface temperature` = surface_t,
    `monthly bottom temperature` = bottom_t) %>% 
  pivot_longer(
    names_to = "var", 
    values_to = "temperature", cols = ends_with("temperature"))

# Pivot daily
temps_daily <- daily_fvcom_temps %>% 
  rename(
    `daily surface temperature` = surface_t,
    `daily bottom temperature` = bottom_t) %>% 
  pivot_longer(
    names_to = "var", 
    values_to = "temperature", 
    cols = ends_with("temperature")) %>% 
  mutate(area_id = factor(area_id, levels = areas_northsouth))



# Plot the breaks over the
deg_c <- "\u00b0C"
ggplot() +
  # geom_line(
  #   data = temps_daily,
  #   aes(time, temperature),
  #   linewidth = 0.2, alpha = 0.5) +
  geom_line(
    data = temps_monthly,
    # data = filter(temps_monthly, area_id %in% area_subset),
    aes(time, temperature),
    linewidth = 0.2, alpha = 0.5) +
  geom_vline(
    data = filter(stars_results_summ, str_detect(var, "monthly")),
    # data = filter(stars_results_summ,
    #               area_id %in% area_subset,
    #               str_detect(var, "monthly")),
    aes(
      xintercept = time,
      color = shift_direction),
    linewidth = 1.5) +
  scale_color_gmri() +
  scale_y_continuous(labels = scales::label_number(suffix = deg_c)) +
  facet_grid(area_id~var, labeller = label_wrap_gen()) +
  theme(
    legend.position = "bottom",
    strip.text.y = element_text(angle = 0)) + 
  labs(color = "",
       y = "Temperature",
       title = "STARS Regime Shifts from FVCOM Temperatures")

```




## Days In/Out Temperature Preferences

Things we were thinking about

days over 20 is too high for
12 degrees is the magic number for larvae

Metabolism/Stress at 18C


```{r}


# The degday functions were built with the ability to model daily cycles
# the sine and triangle methods accomodate this
# since we only have daily data the simple average is probably the way to do it
thresh_low <- 10
thresh_up  <- 18
lobecol_dd <- daily_fvcom_temps %>%
  group_by(area_id) %>% 
  mutate(
    opt_btemp_dd = dd_calc(
      daily_min = bottom_t, 
      daily_max = bottom_t, 
      thresh_low = thresh_low, 
      thresh_up = thresh_up, 
      method = "simp_avg"),
    opt_btemp  = if_else(between(bottom_t, 10,18), 1, 0),
    stress_btemp  = if_else(bottom_t > 18, 1, NA),
    cold_btemp  = if_else(bottom_t < 10, 1, NA))


lobecol_dd %>% 
  mutate(year = lubridate::year(time)) %>% 
  group_by(area_id, year) %>% 
  summarise(
    across(
      ends_with("temp"), 
      ~sum(.x, na.rm = T)),
    .groups = "drop") %>% 
  pivot_longer(
    cols = ends_with("temp"), 
    names_to = "var", 
    values_to = "totals") %>% 
  filter(area_id %in% area_subset) %>% 
  mutate(area_id = factor(area_id, levels = areas_northsouth),
         var = case_when(
           var == "opt_btemp" ~ "Preferred Bottom Temperatures 10-18C", 
           var == "stress_btemp" ~ "Heat Stress Conditions >18C",
           var == "cold_btemp" ~ "Below Preferred Conditions <10C")) %>% 
  ggplot() +
  geom_col(aes(year, y = totals, fill = var), 
           color = "white", width = 1, linewidth = 0.1) + 
  #geom_hline(yintercept = 366/2, color = "gray20", linetype = 3) +
  facet_grid(area_id~.) +
  scale_x_continuous(expand = expansion(add = c(0.15,0.15))) +
  scale_fill_manual(values = c("lightblue",  "#ea4f12", "#057872")) +
  theme(strip.text.y = element_text(angle = 0),
      legend.position = "bottom") +
  guides(fill = guide_legend(
    nrow = 2, 
    title.position = "top",
    title.hjust = 0.5))+
  labs(y = "Days in Range",
       fill = "Daily Temperature Conditions", color = "",
       title = "FVCOM Bottom Temperature Suitability")



```






## Monthly Salinity



```{r}
#| label: process monthly salinity regimes

# Take the input data,
# Get monthly averages
# remove trend and long-term monthly means
# run STARS routine again


# Run the monthly versions

# # Run them all
# surf_sal_monthly_shifts <- monthly_fvcom_sal %>%
#   mutate(
#     year = lubridate::year(time),
#     month = lubridate::month(time)) %>%
#   split(.$area_id) %>%
#   map_dfr(function(.x){
# 
#     # Make it monthly
#     .x_monthly <- .x %>%
#       group_by(year, month) %>%
#       summarise(
#         surface_salinity = mean(surface_salinity, na.rm = T),
#         bottom_salinity  = mean(bottom_salinity, na.rm = T),
#         .groups = "drop") %>%
#       mutate(month = factor(month),
#              yr_num = as.numeric(as.character(year)))
# 
# 
#     # Fit the model to detrend and remove seasons
#     # Model a linear trend and the seasonal cycle
#     season_trend_model <- gam(
#       surface_salinity ~ month + yr_num,
#       data = .x_monthly,
#       method = "REML")
# 
#     # save the results
#     preprocessed_results <- broom::augment(x = season_trend_model) %>%
#       rename(
#         model_fit = .fitted,
#         model_resid = .resid) %>%
#       # Rebuild a "date" column to pass to the function
#       mutate(time = as.Date(
#         str_c(
#           yr_num,
#           str_pad(month, side = "left", pad = "0", width = 2),
#           "15", sep = "-")))
#     #return(preprocessed_results) #check
# 
# 
#     # Get the results from that
#     x_rstars <- rstars(
#       data.timeseries = as.data.frame(
#         preprocessed_results[,c("time", "model_resid")]),
#       l.cutoff = 12*7,
#       pValue = 0.05,
#       Huber = 1,
#       Endfunction = T,
#       preWhitening = T,
#       OLS = F,
#       MPK = T,
#       IP4 = F,
#       SubsampleSize = (12*7 + 1)/3,
#       returnResults = T)
# 
#     return(x_rstars)
# 
#     }, .id = "area_id")
# 
# 
# 
# #Bottom temperature
# bot_sal_monthly_shifts <- monthly_fvcom_sal %>%
#   mutate(
#     year = lubridate::year(time),
#     month = lubridate::month(time)) %>%
#   split(.$area_id) %>%
#   map_dfr(function(.x){
# 
#     # Make it monthly
#     .x_monthly <- .x %>%
#       group_by(year, month) %>%
#       summarise(
#         surface_salinity = mean(surface_salinity, na.rm = T),
#         bottom_salinity  = mean(bottom_salinity, na.rm = T),
#         .groups = "drop") %>%
#       mutate(month = factor(month),
#              yr_num = as.numeric(as.character(year)))
# 
# 
#     # Fit the model to detrend and remove seasons
#     # Model a linear trend and the seasonal cycle
#     season_trend_model <- gam(
#       bottom_salinity ~ month + yr_num,
#       data = .x_monthly,
#       method = "REML")
# 
#     # save the results
#     preprocessed_results <- broom::augment(x = season_trend_model) %>%
#       rename(
#         model_fit = .fitted,
#         model_resid = .resid) %>%
#       
#       # Rebuild a "date" column to pass to the function
#       mutate(time = as.Date(
#         str_c(
#           yr_num,
#           str_pad(month, side = "left", pad = "0", width = 2),
#           "15", sep = "-")))
#     #return(preprocessed_results) #check
# 
# 
#     # Get the results from that
#     x_rstars <- rstars(
#       data.timeseries = as.data.frame(
#         preprocessed_results[,c("time", "model_resid")]),
#       l.cutoff = 12*7,
#       pValue = 0.05,
#       Huber = 1,
#       Endfunction = T,
#       preWhitening = T,
#       OLS = F,
#       MPK = T,
#       IP4 = F,
#       SubsampleSize = (12*7 + 1)/3,
#       returnResults = T)
# 
#     return(x_rstars)
# 
#     }, .id = "area_id")
# 
# 
# 
# 
# 
# # Save them
# write_csv(surf_sal_monthly_shifts, here::here("rstars_results/lobecol_ssal_monthly_shifts_detrended.csv"))
# write_csv(bot_sal_monthly_shifts, here::here("rstars_results/lobecol_bsal_monthly_shifts_detrended.csv"))

```



### Plotting Salinity Breaks

```{r}
mss <- surf_sal_monthly_shifts %>% 
  filter(RSI != 0) %>% 
  mutate(
    shift_direction = if_else(RSI>0, "Shift to Salt", "Shift to Fresh"),   
    var = "surface salinity") %>% 
  dplyr::select(area_id, time, RSI, shift_direction, var)

mbs <- bot_sal_monthly_shifts %>% 
  filter(RSI != 0) %>% 
  mutate(
    shift_direction = if_else(
      RSI > 0, "Shift to Salt", "Shift to Fresh"),   
    var = "bottom salinity") %>% 
  dplyr::select(area_id, time, RSI, shift_direction, var)


# Combine results for plotting
sal_results_summ <- bind_rows(list(mss, mbs)) %>% 
  mutate(area_id = factor(area_id, levels = areas_northsouth),
         year = year(time))





# Plot the breaks over the
monthly_fvcom_sal %>% 
  pivot_longer(
    cols = ends_with("salinity"), 
    names_to = "var", values_to = "salinity") %>% 
  mutate(var = str_replace_all(var, "_", " "),
         area_id = factor(area_id, levels = areas_northsouth)) %>% 
  ggplot() +
  geom_line(
    aes(time, salinity),
    linewidth = 0.2, alpha = 0.5) +
  geom_vline(
    data = sal_results_summ,
    aes(
      xintercept = time,
      color = shift_direction),
    linewidth = 1.5) +
  scale_color_gmri() +
  facet_grid(area_id~var, labeller = label_wrap_gen(), scales = "free") +
  theme(
    panel.grid.major = element_blank(),
    legend.position = "bottom",
    strip.text.y = element_text(angle = 0)) + 
  labs(color = "",
       y = "Salinity",
       title = "STARS Regime Shifts from FVCOM Salinity")
```



# Other Environmental Features

In addition to temperature, we have the additional environmental covariates as well.



```{r}
#| eval: false


list(
  "PPD" = ecodata::chl_pp,
  "Z" = ecodata::chl_pp,
)
```



```{r}
ecodata::plot_nao()
ecodata::plot_gsi()
```

